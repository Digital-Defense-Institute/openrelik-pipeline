name: Custom.Server.Utils.TriagePlasoOpenRelik
description: |
   This server monitoring artifact will automatically send any collected KAPE triage artifacts to the provided endpoint, and process it with Plaso/log2timeline.
   Filename: `vr_kapefiles_$fqdn.zip`

type: SERVER_EVENT

parameters:
   - name: ArtifactNameRegex
     default: "Windows.KapeFiles.Targets"
     description: A regular expression to select which artifacts to upload
   - name: Host
     default: "http://openrelik-pipeline:5000"
     

sources:
  - query: |
        LET output_file <= tempfile(extension=".zip")
        
        LET host <= if(condition=Host, then=Host, 
           else=server_metadata().DefaultHost)
        
        LET UploadFlowDefinition = '
        name: UploadFlow
        
        parameters:
           - name: FlowId
           - name: ClientId
        
        sources:
          - name: FlowDetails
            query: SELECT * FROM flows(client_id=ClientId, flow_id=FlowId)
          - query: |
                SELECT * FROM foreach(
                row={
                    SELECT *, Data["VFSPath"] AS VFSPath 
                    FROM enumerate_flow(client_id=ClientId, flow_id=FlowId)
                },
                query={
                  SELECT OSPath, 
                         upload(file=OSPath, accessor="fs") AS Upload 
                  FROM stat(filename=VFSPath, accessor="fs")
                })
        '
        
        /*
         * We move the http_client call into a second SELECT inside a foreach,
         * so that we can properly do SELECT * FROM http_client(...).
         */
        LET upload_to_endpoint(ClientId, FlowId, Fqdn) = 
            SELECT * FROM foreach(
              row={
                /* First step: produce the zip by collecting the flowâ€™s data */
                SELECT * FROM collect(
                  artifacts="UploadFlow", 
                  artifact_definitions=UploadFlowDefinition,
                  args=dict(
                    `UploadFlow`=dict(
                      ClientId=ClientId, 
                      FlowId=FlowId
                    )
                  ),
                  output=output_file
                )
              },
              query={
                /* Second step: now that zip is available, POST it via http_client */
                SELECT * FROM http_client(
                  method="POST",
                  url=format(format="%v/api/plaso", args=[host]),
                  files=dict(
                    file=format(format="vr_kapefiles_%v.zip", args=[Fqdn]),
                    key="file",
                    path=output_file,
                    accessor="file"
                  )
                )
              }
            )

        LET completions = SELECT *, client_info(client_id=ClientId).os_info.fqdn AS Fqdn 
            FROM watch_monitoring(artifact="System.Flow.Completion")
            WHERE Flow.artifacts_with_results =~ ArtifactNameRegex
        
        /* For each matching flow completion, call upload_to_endpoint() */
        SELECT * FROM foreach(
            row=completions, 
            query={
                SELECT * FROM upload_to_endpoint(
                  ClientId=ClientId, 
                  FlowId=FlowId, 
                  Fqdn=Fqdn
                )
            }
        )
